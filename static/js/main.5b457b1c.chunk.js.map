{"version":3,"sources":["Form.js","SingleLineItem.js","App.js","reportWebVitals.js","index.js"],"names":["Form","uniqueId","handleSubmit","bind","event","preventDefault","this","newVDItemInfo","id","wireTag","target","value","load","Number","loadType","pf","voltage","numOfPhases","conductorMaterial","conduitMaterial","parallelRuns","wireSize","wireLength","props","calcVD","className","onSubmit","htmlFor","type","placeholder","listOfWireSizes","map","element","i","href","React","Component","SingleLineItem","handleClick","lineItemId","removeLineItem","lineItem","voltageDrop","voltageDropPercent","onClick","xmlns","width","height","viewBox","d","App","state","vdItemArray","listOfReactances","wire","PVC","aluminum","steel","listOfCuACResistances","listOfAlACResistances","addLineItem","array","reverse","num","Math","round","EPSILON","newLineItem","updatedLineItem","setState","idToRemove","updatedList","index","findIndex","item","splice","impInput","resistance","reactance","numWireSizeFromForm","slice","find","impedance","cos","acos","sin","console","log","ampInput","calcImp","amps","calcAmps","roundToTwoDec","printArray","arrayReverse","singleElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b457b1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.uniqueId = 0;\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.uniqueId += 1;\r\n    let newVDItemInfo = {\r\n      id: this.uniqueId,\r\n      wireTag: event.target.wireTag.value,\r\n      load: Number(event.target.load.value),\r\n      loadType: event.target.loadType.value,\r\n      pf: Number(event.target.pf.value),\r\n      voltage: event.target.voltage.value,\r\n      numOfPhases: event.target.numOfPhases.value,\r\n      conductorMaterial: event.target.conductorMaterial.value,\r\n      conduitMaterial: event.target.conduitMaterial.value,\r\n      parallelRuns: Number(event.target.parallelRuns.value),\r\n      wireSize: event.target.wireSize.value,\r\n      wireLength: Number(event.target.wireLength.value),\r\n    };\r\n    this.props.calcVD(newVDItemInfo);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-area-div\">\r\n        <form onSubmit={this.handleSubmit} className=\"form-area\">\r\n\r\n          <h1>Voltage Drop Calculator</h1>\r\n\r\n{/* WIRE TAG */}\r\n          <div className=\"input-area-div\">\r\n            <label className=\"form-label\" htmlFor=\"wireTag\">\r\n              Wire Tag:\r\n            </label>\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              id=\"wireTag\"\r\n              placeholder=\"ex. 1A\"\r\n            />\r\n          </div>\r\n{/* LOAD */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"load\" className=\"form-label\">\r\n              Electrical Load:\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              id=\"load\"\r\n              placeholder=\"ex. 10\"\r\n            />\r\n          </div>\r\n{/* LOAD TYPE */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"loadType\" className=\"form-label\">\r\n              Load Type:\r\n            </label>\r\n            <select id=\"loadType\" className=\"form-select\">\r\n              <option value=\"amps\">Amps</option>\r\n              <option value=\"watts\">Watts</option>\r\n              <option value=\"voltAmps\">Volt-Amps</option>\r\n            </select>\r\n          </div>\r\n{/* POWER FACTOR */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"pf\" className=\"form-label\">\r\n              Power Factor:\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              id=\"pf\"\r\n              placeholder=\"ex. 0.85\"\r\n            />\r\n          </div>\r\n{/* VOLTAGE */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"voltage\" className=\"form-label\">\r\n              Voltage:\r\n            </label>\r\n            <select id=\"voltage\" className=\"form-select\">\r\n              <option value=\"120\">120V</option>\r\n              <option value=\"208\">208V</option>\r\n              <option value=\"277\">277V</option>\r\n              <option value=\"480\">480V</option>\r\n            </select>\r\n          </div>\r\n{/* NUMBER OF PHASES */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"numOfPhases\" className=\"form-label\">\r\n              Number of Phases:\r\n            </label>\r\n            <select id=\"numOfPhases\" className=\"form-select\">\r\n              <option value=\"single\">Single Phase</option>\r\n              <option value=\"three\">Three Phase</option>\r\n            </select>\r\n          </div>\r\n{/* CONDUCTOR MATERIAL */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"conductorMaterial\" className=\"form-label\">\r\n              Conductor Material:\r\n            </label>\r\n            <select id=\"conductorMaterial\" className=\"form-select\">\r\n              <option value=\"copper\">Copper</option>\r\n              <option value=\"aluminum\">Aluminum</option>\r\n            </select>\r\n          </div>\r\n{/* CONDUIT MATERIAL */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"conduitMaterial\" className=\"form-label\">\r\n              Conduit Material:\r\n            </label>\r\n            <select id=\"conduitMaterial\" className=\"form-select\">\r\n              <option value=\"steel\">Steel</option>\r\n              <option value=\"aluminum\">Aluminum</option>\r\n              <option value=\"PVC\">PVC</option>\r\n            </select>\r\n          </div>\r\n{/* NUMBER OF PARALLEL RUNS */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"parallelRuns\" className=\"form-label\">\r\n              Number of Parallel Runs:\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              id=\"parallelRuns\"\r\n              placeholder=\"ex. 1\"\r\n            />\r\n          </div>\r\n{/* WIRE SIZE */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"wireSize\" className=\"form-label\">\r\n              Wire Size:\r\n            </label>\r\n            <select id=\"wireSize\" className=\"form-select\">\r\n              {this.props.listOfWireSizes.map((element, i) => {\r\n                return (\r\n                  <option key={i} value={element}>\r\n                    {element}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n{/* WIRE LENGTH */}\r\n          <div className=\"input-area-div\">\r\n            <label htmlFor=\"wireLength\" className=\"form-label\">\r\n              Wire Length (ft):\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-input\"\r\n              id=\"wireLength\"\r\n              placeholder=\"ex. 150\"\r\n            />\r\n          </div>\r\n{/* SUBMIT BUTTON */}\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            SUBMIT\r\n          </button>\r\n        </form>\r\n        <p className=\"copywrite\">created by <a href=\"https://thisisjoshtaylor.com/\">thisisjoshtaylor</a></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass SingleLineItem extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(event) {\r\n    let lineItemId = Number(event.target.id);\r\n    this.props.removeLineItem(lineItemId);\r\n  }\r\n\r\n  render() {\r\n    // simplify variable names using destructuring syntax\r\n    let {\r\n      id,\r\n      wireTag,\r\n      load,\r\n      loadType,\r\n      pf,\r\n      voltage,\r\n      numOfPhases,\r\n      conductorMaterial,\r\n      conduitMaterial,\r\n      parallelRuns,\r\n      wireSize,\r\n      wireLength,\r\n      voltageDrop,\r\n      voltageDropPercent,\r\n    } = this.props.lineItem;\r\n    return (\r\n      <li>\r\n        <svg\r\n          className=\"close-button\"\r\n          id={id}\r\n          onClick={this.handleClick}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path d=\"M23 20.168l-8.185-8.187 8.185-8.174-2.832-2.807-8.182 8.179-8.176-8.179-2.81 2.81 8.186 8.196-8.186 8.184 2.81 2.81 8.203-8.192 8.18 8.192z\" />\r\n        </svg>\r\n        <p className=\"wire-title\">{`Wire ${wireTag}`}</p><br />\r\n        <span className=\"underline\">Input:</span>{` Load: ${load} ${loadType}, \r\n            Power Factor: ${pf}, \r\n            Voltage: ${voltage}V, \r\n            Phase: ${numOfPhases}`} <br />\r\n            {`Conductor Material: ${conductorMaterial}, \r\n            Conduit Material: ${conduitMaterial}`} <br />\r\n            {`# of Parallel Runs: ${parallelRuns} \r\n            Wire Size: ${wireSize}, \r\n            Wire Length: ${wireLength}ft`}\r\n        <br />\r\n        <br />\r\n        <p className=\"bold\">\r\n          {`Voltage Drop: ${voltageDrop}V`}\r\n          <br />\r\n          {`Voltage Drop Percent: ${voltageDropPercent}%`}\r\n        </p>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleLineItem;\r\n","import React from \"react\";\r\nimport \"./CSS/App.css\";\r\nimport Form from \"./Form\";\r\nimport SingleLineItem from \"./SingleLineItem\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      vdItemArray: [],\r\n      listOfWireSizes: [\r\n        \"#14\",\r\n        \"#12\",\r\n        \"#10\",\r\n        \"#8\",\r\n        \"#6\",\r\n        \"#4\",\r\n        \"#3\",\r\n        \"#2\",\r\n        \"#1\",\r\n        \"#1/0\",\r\n        \"#2/0\",\r\n        \"#3/0\",\r\n        \"#4/0\",\r\n        \"#250\",\r\n        \"#300\",\r\n        \"#400\",\r\n        \"#500\",\r\n        \"#600\",\r\n        \"#750\",\r\n        \"#1000\",\r\n      ],\r\n      // The following array has its values taken from the 2017 NEC Chapter 9 Table 9\r\n      listOfReactances: [\r\n        { wire: \"num14\", PVC: 0.058, aluminum: 0.058, steel: 0.073 },\r\n        { wire: \"num12\", PVC: 0.054, aluminum: 0.054, steel: 0.068 },\r\n        { wire: \"num10\", PVC: 0.05, aluminum: 0.05, steel: 0.063 },\r\n        { wire: \"num8\", PVC: 0.052, aluminum: 0.052, steel: 0.065 },\r\n        { wire: \"num6\", PVC: 0.051, aluminum: 0.051, steel: 0.064 },\r\n        { wire: \"num4\", PVC: 0.048, aluminum: 0.048, steel: 0.06 },\r\n        { wire: \"num3\", PVC: 0.047, aluminum: 0.047, steel: 0.059 },\r\n        { wire: \"num2\", PVC: 0.045, aluminum: 0.045, steel: 0.057 },\r\n        { wire: \"num1\", PVC: 0.046, aluminum: 0.046, steel: 0.057 },\r\n        { wire: \"num1/0\", PVC: 0.044, aluminum: 0.044, steel: 0.055 },\r\n        { wire: \"num2/0\", PVC: 0.043, aluminum: 0.043, steel: 0.054 },\r\n        { wire: \"num3/0\", PVC: 0.042, aluminum: 0.042, steel: 0.052 },\r\n        { wire: \"num4/0\", PVC: 0.041, aluminum: 0.041, steel: 0.051 },\r\n        { wire: \"num250\", PVC: 0.041, aluminum: 0.041, steel: 0.052 },\r\n        { wire: \"num300\", PVC: 0.041, aluminum: 0.041, steel: 0.051 },\r\n        { wire: \"num350\", PVC: 0.04, aluminum: 0.04, steel: 0.05 },\r\n        { wire: \"num400\", PVC: 0.04, aluminum: 0.04, steel: 0.049 },\r\n        { wire: \"num500\", PVC: 0.039, aluminum: 0.039, steel: 0.048 },\r\n        { wire: \"num600\", PVC: 0.039, aluminum: 0.039, steel: 0.048 },\r\n        { wire: \"num750\", PVC: 0.038, aluminum: 0.038, steel: 0.048 },\r\n        { wire: \"num1000\", PVC: 0.037, aluminum: 0.037, steel: 0.046 },\r\n      ],\r\n      // The following array has its values taken from the 2017 NEC Chapter 9 Table 9\r\n      listOfCuACResistances: [\r\n        { wire: \"num14\", PVC: 3.1, aluminum: 3.1, steel: 3.1 },\r\n        { wire: \"num12\", PVC: 2, aluminum: 2, steel: 2 },\r\n        { wire: \"num10\", PVC: 1.2, aluminum: 1.2, steel: 1.2 },\r\n        { wire: \"num8\", PVC: 0.78, aluminum: 0.78, steel: 0.78 },\r\n        { wire: \"num6\", PVC: 0.49, aluminum: 0.49, steel: 0.49 },\r\n        { wire: \"num4\", PVC: 0.31, aluminum: 0.31, steel: 0.31 },\r\n        { wire: \"num3\", PVC: 0.25, aluminum: 0.25, steel: 0.25 },\r\n        { wire: \"num2\", PVC: 0.19, aluminum: 0.2, steel: 0.2 },\r\n        { wire: \"num1\", PVC: 0.15, aluminum: 0.16, steel: 0.16 },\r\n        { wire: \"num1/0\", PVC: 0.12, aluminum: 0.13, steel: 0.12 },\r\n        { wire: \"num2/0\", PVC: 0.1, aluminum: 0.1, steel: 0.1 },\r\n        { wire: \"num3/0\", PVC: 0.077, aluminum: 0.082, steel: 0.079 },\r\n        { wire: \"num4/0\", PVC: 0.062, aluminum: 0.067, steel: 0.063 },\r\n        { wire: \"num250\", PVC: 0.052, aluminum: 0.057, steel: 0.054 },\r\n        { wire: \"num300\", PVC: 0.044, aluminum: 0.049, steel: 0.045 },\r\n        { wire: \"num350\", PVC: 0.038, aluminum: 0.043, steel: 0.039 },\r\n        { wire: \"num400\", PVC: 0.033, aluminum: 0.038, steel: 0.035 },\r\n        { wire: \"num500\", PVC: 0.027, aluminum: 0.032, steel: 0.029 },\r\n        { wire: \"num600\", PVC: 0.023, aluminum: 0.028, steel: 0.025 },\r\n        { wire: \"num750\", PVC: 0.019, aluminum: 0.024, steel: 0.021 },\r\n        { wire: \"num1000\", PVC: 0.015, aluminum: 0.019, steel: 0.018 }\r\n      ],\r\n      // The following array has its values taken from the 2017 NEC Chapter 9 Table 9\r\n      listOfAlACResistances: [\r\n        // { wire: \"num14\", PVC: 0., aluminum: 0., steel: 0. }, this needs to be handled becasue there is no value for #14 aluminum wire\r\n        { wire: \"num12\", PVC: 3.2, aluminum: 3.2, steel: 3.2 },\r\n        { wire: \"num10\", PVC: 2, aluminum: 2, steel: 2 },\r\n        { wire: \"num8\", PVC: 1.3, aluminum: 1.3, steel: 1.3 },\r\n        { wire: \"num6\", PVC: 0.81, aluminum: 0.81, steel: 0.81 },\r\n        { wire: \"num4\", PVC: 0.51, aluminum: 0.51, steel: 0.51 },\r\n        { wire: \"num3\", PVC: 0.4, aluminum: 0.41, steel: 0.4 },\r\n        { wire: \"num2\", PVC: 0.32, aluminum: 0.32, steel: 0.32 },\r\n        { wire: \"num1\", PVC: 0.25, aluminum: 0.26, steel: 0.25 },\r\n        { wire: \"num1/0\", PVC: 0.2, aluminum: 0.21, steel: 0.2 },\r\n        { wire: \"num2/0\", PVC: 0.16, aluminum: 0.16, steel: 0.16 },\r\n        { wire: \"num3/0\", PVC: 0.13, aluminum: 0.13, steel: 0.13 },\r\n        { wire: \"num4/0\", PVC: 0.1, aluminum: 0.11, steel: 0.1 },\r\n        { wire: \"num250\", PVC: 0.085, aluminum: 0.09, steel: 0.086 },\r\n        { wire: \"num300\", PVC: 0.071, aluminum: 0.076, steel: 0.072 },\r\n        { wire: \"num350\", PVC: 0.061, aluminum: 0.066, steel: 0.063 },\r\n        { wire: \"num400\", PVC: 0.054, aluminum: 0.059, steel: 0.055 },\r\n        { wire: \"num500\", PVC: 0.043, aluminum: 0.048, steel: 0.045 },\r\n        { wire: \"num600\", PVC: 0.036, aluminum: 0.041, steel: 0.038 },\r\n        { wire: \"num750\", PVC: 0.029, aluminum: 0.034, steel: 0.031 },\r\n        { wire: \"num1000\", PVC: 0.023, aluminum: 0.027, steel: 0.025 }\r\n      ]\r\n    };\r\n    // the following functions have their 'this' bound to App.js\r\n    this.calcVD = this.calcVD.bind(this);\r\n    this.addLineItem = this.addLineItem.bind(this);\r\n    this.removeLineItem = this.removeLineItem.bind(this);\r\n  }\r\n\r\n  arrayReverse(array) {\r\n    let reversedArray = array;\r\n    return reversedArray.reverse();\r\n  }\r\n  // The following function takes a number input and returns it rounded to two decimal places\r\n  roundToTwoDec(num){\r\n    return Math.round( ( num + Number.EPSILON ) * 100) / 100;\r\n  }\r\n\r\n  // The following function takes a new object line item and updates the state with new object.\r\n  addLineItem(newLineItem) {\r\n    let updatedLineItem = [...this.state.vdItemArray, newLineItem];\r\n    this.setState({vdItemArray: updatedLineItem})\r\n  }\r\n\r\n  // The following function takes an ID as an input, \r\n  removeLineItem(idToRemove) {\r\n    let updatedList = [...this.state.vdItemArray];\r\n    let index = updatedList.findIndex(item => item.id === idToRemove)\r\n    updatedList.splice(index,1);\r\n    this.setState({vdItemArray: updatedList})\r\n  }\r\n\r\n  calcImp(impInput) {\r\n    // simplify variable names using destructuring syntax\r\n    const { wireSize, conductorMaterial, conduitMaterial, pf } = impInput;\r\n    const { listOfAlACResistances, listOfCuACResistances, listOfReactances } =\r\n      this.state;\r\n    // initialize variables since they are only generated inside if statements\r\n    let resistance;\r\n    let reactance;\r\n\r\n    // convert wire format from \"#\" to \"num\" by removing the first character (#) and concatinating \"num\"\r\n    const numWireSizeFromForm = \"num\" + wireSize.slice(1);\r\n\r\n    // assign the correct value of the resistance by checking if the value of the conductor material from the form is copper. if it is not, it must be aluminum. take the values from the appropriate location of the state object.\r\n    if (conductorMaterial === \"copper\") {\r\n      // use find() to search through the array for objects with a wire property value of what is stored in numWireSizeFromForm. what is returned is the object with the corresponding wire property\r\n      // Once found, pull out the correct value by searching for the property of conduitMaterial and assigning it to 'resistance'\r\n      let wireProperties = listOfCuACResistances.find((element) => {\r\n        return element.wire === numWireSizeFromForm;\r\n      });\r\n      resistance = wireProperties[conduitMaterial];\r\n    } else {\r\n      let wireProperties = listOfAlACResistances.find((element) => {\r\n        return element.wire === numWireSizeFromForm;\r\n      });\r\n      resistance = wireProperties[conduitMaterial];\r\n    }\r\n\r\n    // use find() to search through the array for objects with a wire property value of what is stored in numWireSizeFromForm. what is returned is the object with the corresponding wire property\r\n    // Once found, pull out the correct value by searching for the property of conduitMaterial and assigning it to 'reactance'\r\n    let wireProperties = listOfReactances.find((element) => {\r\n      return element.wire === numWireSizeFromForm;\r\n    });\r\n    reactance = wireProperties[conduitMaterial];\r\n\r\n    // calculate the impedance using the following equation: impedance = (Resistance * cos(arccos(pf)))+(Reactance * sin(arccos(pf))). Note: arccos(pf) is the angle of the power triangle.\r\n    let impedance =\r\n      resistance * Math.cos(Math.acos(pf)) +\r\n      reactance * Math.sin(Math.acos(pf));\r\n\r\n    console.log(`Reactance: ${reactance}`);\r\n    console.log(`Resistance: ${resistance}`);\r\n    console.log(`Impedance: ${impedance}`);\r\n\r\n    return impedance;\r\n  }\r\n\r\n  calcAmps(ampInput) {\r\n    // simplify variable names using destructuring syntax\r\n    let { load, loadType, numOfPhases, voltage, pf } = ampInput;\r\n\r\n    // if amps return amps\r\n    if (loadType === \"amps\") {\r\n      return load;\r\n    }\r\n    // if watts and single phase return watts/(voltage * pf)\r\n    if (loadType === \"watts\" && numOfPhases === \"single\") {\r\n      return load / (voltage * pf);\r\n    }\r\n    // if watts and three phase return watts/(voltage * pf * 1.73)\r\n    if (loadType === \"watts\" && numOfPhases === \"three\") {\r\n      return load / (voltage * pf * 1.73);\r\n    }\r\n    // if VA and single phase return VA/voltage\r\n    if (loadType === \"voltAmps\" && numOfPhases === \"single\") {\r\n      return load / voltage;\r\n    }\r\n    // if VA and three phase return VA/(voltage*1.73)\r\n    if (loadType === \"voltAmps\" && numOfPhases === \"three\") {\r\n      return load / (voltage * 1.73);\r\n    }\r\n  }\r\n\r\n  calcVD(newVDItemInfo) {\r\n    // simplify variable names using destructuring syntax\r\n    let {\r\n      wireTag,\r\n      load,\r\n      loadType,\r\n      pf,\r\n      voltage,\r\n      numOfPhases,\r\n      conductorMaterial,\r\n      conduitMaterial,\r\n      parallelRuns,\r\n      wireSize,\r\n      wireLength,\r\n    } = newVDItemInfo;\r\n\r\n    let voltageDrop;\r\n\r\n    console.log(`Wire Tag: ${wireTag}`);\r\n    // create an input object for the function calls to simplify code\r\n    const impInput = { wireSize, conductorMaterial, conduitMaterial, pf };\r\n    const ampInput = { load, loadType, numOfPhases, voltage, pf };\r\n\r\n    // calculate the impedance\r\n    const impedance = this.calcImp(impInput);\r\n\r\n    // calculate the amperage based on the form data\r\n    const amps = this.calcAmps(ampInput);\r\n\r\n    // 1 phase VD = impedance*(dist/1000)*Amps*2/(num parallel runs)\r\n    // 3 phase VD = impedance*(dist/1000)*Amps*1.73/(num parallel runs)\r\n\r\n    if (numOfPhases === \"single\") {\r\n      voltageDrop = (impedance * (wireLength / 1000) * amps * 2) / parallelRuns;\r\n    } else {\r\n      voltageDrop =\r\n        (impedance * (wireLength / 1000) * amps * 1.73) / parallelRuns;\r\n    }\r\n\r\n    let voltageDropPercent = (voltageDrop / voltage) * 100;\r\n\r\n    console.log(`Voltage Drop: ${voltageDrop}`);\r\n    console.log(`Voltage Drop Percent: ${voltageDropPercent}`);\r\n\r\n    newVDItemInfo.voltageDrop = this.roundToTwoDec(voltageDrop);\r\n    newVDItemInfo.voltageDropPercent = this.roundToTwoDec(voltageDropPercent);\r\n\r\n    this.addLineItem(newVDItemInfo)\r\n  }\r\n\r\n  render() {\r\n    let printArray = this.arrayReverse(this.state.vdItemArray);\r\n    return (\r\n      <div className=\"background\">\r\n        {/* <Header headerName=\"Voltage Drop Calculator\" /> */}\r\n        <Form\r\n          listOfWireSizes={this.state.listOfWireSizes}\r\n          calcVD={this.calcVD}\r\n        />\r\n        <div className=\"results-area\">\r\n          <p className=\"results-header\">Results</p>\r\n          <ol className=\"results-list\">\r\n              {printArray.map((singleElement)=>{\r\n                  return <SingleLineItem key={singleElement.id} lineItem={singleElement} removeLineItem={this.removeLineItem} />\r\n              })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}